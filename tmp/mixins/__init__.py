"""
mixins/__init__.py

This module provides access to all mixin classes defined in the mixins directory.
It is automatically generated by the generate_mixins_init.py script.

Available Mixins:
- TreeMixin: A mixin class for implementing tree structures in SQLAlchemy models
- DocMixin: A mixin class for document management in SQLAlchemy models
- ImportExportMixin: A mixin class for adding import and export functionality to SQLAlchemy models
- PolymorphicMixin: A mixin class for implementing polymorphic relationships in SQLAlchemy models
- PolymorphicAssociationMixin: A mixin class for implementing polymorphic associations
- EncryptionMixin: A mixin class for adding field-level encryption to SQLAlchemy models
- AuditLogMixin: A mixin class for adding detailed audit logging to SQLAlchemy models
- SchedulingMixin: A mixin class for adding scheduling capabilities to SQLAlchemy models
- VersionControlMixin: A mixin class for adding version control capabilities to SQLAlchemy models
- MetadataMixin: A mixin class for adding flexible metadata capabilities to SQLAlchemy models
- CacheMixin: A mixin class for adding caching functionality to SQLAlchemy models
- CurrencyMixin: A mixin class for adding currency handling capabilities to SQLAlchemy models
- WorkflowMixin: A mixin class for adding workflow capabilities to SQLAlchemy models
- VersioningMixin: A mixin class for adding versioning capabilities to SQLAlchemy models
- ReplicationMixin: A mixin class for adding data replication capabilities to SQLAlchemy models
- CommentableMixin: A comprehensive mixin class for adding advanced commenting capabilities to SQLAlchemy models
- InternationalizationMixin: A mixin class for adding internationalization support to SQLAlchemy models
- SlugMixin: A mixin class for adding slug functionality to SQLAlchemy models
- ApprovalWorkflowMixin: A mixin class for adding complex approval workflow capabilities to SQLAlchemy models
- MultiTenancyMixin: A mixin class for adding multi-tenancy support to SQLAlchemy models
- ArchiveMixin: A mixin class for adding archiving capabilities to SQLAlchemy models
- BaseModelMixin: A mixin class that provides functionality for managing view steps in SQLAlchemy models
- FullTextSearchMixin: A mixin class for adding full-text search capabilities to SQLAlchemy models
- SearchableMixin: A mixin class for adding advanced full-text search capabilities to SQLAlchemy models
- RateLimitMixin: A mixin class for adding rate limiting capabilities to SQLAlchemy models
- StateMachineMixin: A mixin that adds state machine functionality to SQLAlchemy models
- SoftDeleteMixin: A mixin class for adding soft delete functionality to SQLAlchemy models
- GeoLocationMixin: A mixin class for adding geolocation capabilities to SQLAlchemy models
- ProjectMixin: A mixin class that provides comprehensive project management functionality for SQLAlchemy models
"""

# Mixin imports
from .tree_mixin import TreeMixin
from .doc_mixin import DocMixin
from .import_export_mixin import ImportExportMixin
from .polymorphic_mixin import PolymorphicMixin
from .polymorphicassociation import PolymorphicAssociationMixin
from .encryption import EncryptionMixin
from .auditlog import AuditLogMixin
from .scheduling import SchedulingMixin
from .versioncontrol import VersionControlMixin
from .metadata import MetadataMixin
from .cache import CacheMixin
from .currency import CurrencyMixin
from .workflow import WorkflowMixin
from .versioning import VersioningMixin
from .replication import ReplicationMixin
from .commentable import CommentableMixin
from .internationalization import InternationalizationMixin
from .slug import SlugMixin
from .approvalworkflow import ApprovalWorkflowMixin
from .multitenancy import MultiTenancyMixin
from .archive import ArchiveMixin
from .basemodel import BaseModelMixin
from .fulltextsearch import FullTextSearchMixin
from .searchable import SearchableMixin
from .ratelimit import RateLimitMixin
from .statemachine import StateMachineMixin
from .softdelete import SoftDeleteMixin
from .geolocation import GeoLocationMixin
from .project import ProjectMixin

# Define __all__ for explicit exports
__all__ = ['TreeMixin', 'DocMixin', 'ImportExportMixin', 'PolymorphicMixin', 'PolymorphicAssociationMixin', 'EncryptionMixin', 'AuditLogMixin', 'SchedulingMixin', 'VersionControlMixin', 'MetadataMixin', 'CacheMixin', 'CurrencyMixin', 'WorkflowMixin', 'VersioningMixin', 'ReplicationMixin', 'CommentableMixin', 'InternationalizationMixin', 'SlugMixin', 'ApprovalWorkflowMixin', 'MultiTenancyMixin', 'ArchiveMixin', 'BaseModelMixin', 'FullTextSearchMixin', 'SearchableMixin', 'RateLimitMixin', 'StateMachineMixin', 'SoftDeleteMixin', 'GeoLocationMixin', 'ProjectMixin']

def get_mixin_info():
    """
    Get information about all available mixins.

    Returns:
        dict: A dictionary containing information about each mixin.
    """
    return {
        'TreeMixin': {
            'docstring': 'A mixin class for implementing tree structures in SQLAlchemy models.\n\nThis mixin provides methods for tree traversal, manipulation, and querying.\nIt sets up a parent-child relationship and includes utility methods for\nworking with hierarchical data.',
            'methods': ['parent_id', 'parent', 'children', 'depth', 'ancestors', 'root', 'is_descendant_of', 'is_ancestor_of', 'is_sibling_of', 'siblings', 'descendants', 'ancestors_and_self', 'move_to', 'get_tree_representation', 'get_roots', 'get_nodes_at_depth', 'validate_tree', '__repr__'],
            'attributes': []
        },
        'DocMixin': {
            'docstring': "A mixin class for document management in SQLAlchemy models.\n\nThis mixin provides extensive functionality for handling various types of documents,\nincluding metadata extraction, format conversion, encryption, full-text search,\nand more.\n\nAttributes:\n    mime_type (str): The MIME type of the document.\n    doc (ImageColumn): An image representation of the document.\n    doc_text (str): The text content of the document.\n    doc_binary (FileColumn): The binary content of the document.\n    doc_title (str): The title of the document.\n    subject (str): The subject of the document.\n    author (str): The author of the document.\n    keywords (str): Keywords associated with the document.\n    comments (str): Comments on the document.\n    chapter_number (int): The chapter number in the document structure.\n    chapter_title (str): The title of the chapter.\n    section_number (int): The section number in the document structure.\n    section_title (str): The title of the section.\n    sub_section_number (int): The sub-section number in the document structure.\n    sub_section_title (str): The title of the sub-section.\n    doc_context (str): Context for LLM-based text generation.\n    doc_prompt (str): Prompt for LLM-based text generation.\n    doc_type (str): The type of the document (e.g., 'pdf', 'docx').\n    char_count (int): The character count of the document.\n    word_count (int): The word count of the document.\n    lines (int): The number of lines in the document.\n    paragraphs (int): The number of paragraphs in the document.\n    gpt_token_count (int): The token count for GPT models.\n    grammar_checked (bool): Whether the document has been grammar checked.\n    doc_summary (str): A summary of the document.\n    doc_spell_checked (bool): Whether the document has been spell-checked.\n    doc_gpt_ver (str): The version of GPT used for processing.\n    doc_format (str): The format of the document.\n    doc_downloadable (bool): Whether the document is downloadable.\n    doc_template (str): The template used for the document.\n    doc_rendered (bool): Whether the document has been rendered.\n    doc_render (FileColumn): The rendered version of the document.\n    file_size_bytes (int): The size of the document in bytes.\n    producer_prog (str): The program that produced the document.\n    immutable (bool): Whether the document is immutable.\n    page_size (str): The page size of the document.\n    page_count (int): The number of pages in the document.\n    hashx (str): A hash of the document content.\n    is_audio (bool): Whether the document is an audio file.\n    audio_duration_secs (int): The duration of the audio in seconds.\n    audio_frame_rate (int): The frame rate of the audio.\n    audio_channels (int): The number of audio channels.\n    is_encrypted (bool): Whether the document is encrypted.\n    encryption_key (str): The encryption key for the document.",
            'methods': ['check_dependencies', '_extract_pdf_metadata', '_extract_word_metadata', '_extract_text_metadata', '_extract_markdown_metadata', '_update_attributes_from_metadata', 'search_vector', 'update_doc_info', 'extract_metadata', 'generate_summary', 'search', 'highlight_matched_terms', 'encrypt_document', 'decrypt_document', 'convert_format', 'to_markdown', 'from_markdown', 'generate_text_with_llm', 'detect_mime_type', 'set_doc_type_from_mime_type', 'update_document'],
            'attributes': []
        },
        'ImportExportMixin': {
            'docstring': 'A mixin class for adding import and export functionality to SQLAlchemy models.\n\nThis mixin provides methods for exporting model data to CSV, JSON, and Excel\nformats, as well as importing data from these formats. It includes data\nvalidation, error handling, and support for relationships and nested data.\n\nClass Attributes:\n    __export_fields__ (List[str]): List of field names to be exported.\n    __import_fields__ (List[str]): List of field names that can be imported.\n    __export_exclude__ (List[str]): List of field names to exclude from export.\n    __import_exclude__ (List[str]): List of field names to exclude from import.',
            'methods': ['get_exportable_fields', 'get_importable_fields', 'to_dict', 'export_to_csv', 'export_to_json', 'export_to_excel', 'import_data', 'process_import_value', 'import_from_csv', 'import_from_json', 'import_from_excel', 'data_validation_hook', 'pre_import_hook', 'post_export_hook'],
            'attributes': []
        },
        'PolymorphicMixin': {
            'docstring': 'A mixin class for implementing polymorphic relationships in SQLAlchemy models.\n\nThis mixin provides functionality for both single table and joined table\ninheritance strategies, as well as polymorphic associations.\n\nClass Attributes:\n    __polymorphic_on__ (str): The name of the discriminator column.\n    __polymorphic_identity__ (str): The identity value for this specific model.',
            'methods': ['__tablename__', 'id', 'type', '__mapper_args__', 'polymorphic_query', 'create_polymorphic', 'polymorphic_type', 'polymorphic_type'],
            'attributes': []
        },
        'PolymorphicAssociationMixin': {
            'docstring': 'A mixin class for implementing polymorphic associations.\n\nThis mixin allows a model to be associated with multiple other models\nthrough a polymorphic relationship.',
            'methods': ['associated_id', 'associated_type', 'associate_with'],
            'attributes': []
        },
        'EncryptionMixin': {
            'docstring': 'A mixin class for adding field-level encryption to SQLAlchemy models.\n\nThis mixin provides automatic encryption and decryption of specified fields,\nkey management, and utilities for data migration and key rotation.\n\nClass Attributes:\n    __encrypted_fields__ (list): List of field names to be encrypted.\n    __encryption_key__ (bytes): The encryption key used for Fernet.',
            'methods': ['__declare_last__', 'set_encryption_key', 'encrypt_field', 'decrypt_field', 'migrate_unencrypted_data', 'rotate_encryption_key', 'encrypted_field'],
            'attributes': ['__encrypted_fields__', '__encryption_key__']
        },
        'AuditLogMixin': {
            'docstring': 'A mixin class for adding detailed audit logging to SQLAlchemy models.\n\nThis mixin tracks all changes to model instances and records them in a\nseparate audit log table. It provides methods for querying and analyzing\nthe audit log.\n\nClass Attributes:\n    __audit_exclude__ (list): List of field names to exclude from audit logging.',
            'methods': ['audit_logs', '__declare_last__', '_get_current_user_id', '_after_insert', '_after_update', '_after_delete', '_log_change', '_serialize_value', 'get_audit_logs', 'add_custom_audit_log', 'get_audit_trail'],
            'attributes': ['__audit_exclude__']
        },
        'SchedulingMixin': {
            'docstring': 'A mixin class for adding scheduling capabilities to SQLAlchemy models.\n\nThis mixin provides fields and methods for scheduling events or tasks\nwith complex recurrence patterns, time zone support, and exception handling.\n\nAttributes:\n    start_time (DateTime): The start time of the event or task.\n    end_time (DateTime): The end time of the event or task.\n    timezone (String): The time zone for the event or task.\n    recurrence_pattern (String): JSON string describing the recurrence pattern.\n    is_recurring (Boolean): Whether the event or task is recurring.\n    priority (Integer): Priority of the event or task (lower number = higher priority).\n    dependencies (String): JSON string listing dependencies (IDs of other scheduled items).',
            'methods': ['start_time', 'end_time', 'timezone', 'recurrence_pattern', 'is_recurring', 'priority', 'dependencies', 'exceptions', 'set_recurrence', 'get_occurrences', 'is_active', 'add_exception', 'remove_exception', 'set_dependencies', 'get_dependencies', 'find_conflicts'],
            'attributes': []
        },
        'VersionControlMixin': {
            'docstring': 'A mixin class for adding version control capabilities to SQLAlchemy models.\n\nThis mixin provides methods for tracking changes, storing versions, and\nmanaging the version history of model instances.\n\nClass Attributes:\n    __versioned__ (list): List of attribute names to be versioned.\n    __max_versions__ (int): Maximum number of versions to keep (0 for unlimited).',
            'methods': ['versions', '__declare_last__', 'save_version', 'revert_to_version', 'get_version_data', 'compare_versions', 'get_version_history', 'create_branch', 'merge_branch'],
            'attributes': ['__versioned__', '__max_versions__']
        },
        'MetadataMixin': {
            'docstring': 'A mixin class for adding flexible metadata capabilities to SQLAlchemy models.\n\nThis mixin provides methods for storing and retrieving schema-less metadata,\nallowing for dynamic addition of data fields without altering the database schema.\n\nClass Attributes:\n    __metadata_fields__ (list): Optional list of predefined metadata fields.',
            'methods': ['metadata', 'set_metadata', 'get_metadata', 'update_metadata', 'delete_metadata', 'clear_metadata', 'get_all_metadata', 'search_by_metadata', 'get_unique_metadata_keys', 'validate_metadata', 'get_metadata_schema'],
            'attributes': ['__metadata_fields__']
        },
        'CacheMixin': {
            'docstring': 'A mixin class for adding caching functionality to SQLAlchemy models.\n\nThis mixin provides methods for caching individual model instances and\nquery results. It also handles cache invalidation on model updates.\n\nClass Attributes:\n    __cache_timeout__ (int): Default cache timeout in seconds.\n    query_class (CachedQuery): Custom query class for caching queries.',
            'methods': ['__declare_last__', '_invalidate_cache', '_get_instance_cache_key', 'cache_instance', 'get_cached', 'bulk_cache', 'cached_query', 'cached_method', 'refresh_cache', 'clear_cache'],
            'attributes': ['__cache_timeout__', 'query_class']
        },
        'CurrencyMixin': {
            'docstring': "A mixin class for adding currency handling capabilities to SQLAlchemy models.\n\nThis mixin provides methods for currency conversion, formatting, and arithmetic\noperations on monetary amounts.\n\nClass Attributes:\n    __default_currency__ (str): The default currency code (e.g., 'USD').\n    __exchange_rate_api_key__ (str): API key for exchange rate service.\n    __exchange_rate_api_url__ (str): URL for exchange rate API.",
            'methods': ['amount', 'currency', '__declare_last__', 'get_exchange_rates', 'convert_to', 'format', '__add__', '__sub__', '__mul__', '__truediv__', 'round'],
            'attributes': ['__default_currency__', '__exchange_rate_api_key__', '__exchange_rate_api_url__']
        },
        'WorkflowMixin': {
            'docstring': 'A mixin class for adding workflow capabilities to SQLAlchemy models.\n\nThis mixin provides methods for defining and managing workflow states,\ntransitions between states, and actions to be performed on state changes.\n\nClass Attributes:\n    __workflow_states__ (dict): Defines the possible states and their descriptions.\n    __workflow_transitions__ (dict): Defines the possible transitions between states.\n    __workflow_initial_state__ (str): The initial state for new instances.',
            'methods': ['current_state', 'state_history', '__declare_last__', '_set_initial_state', 'change_state', '_trigger_transition_action', 'can_transition_to', 'get_available_transitions', 'get_workflow_graph', 'get_workflow_as_dict'],
            'attributes': ['__workflow_states__', '__workflow_transitions__', '__workflow_initial_state__']
        },
        'VersioningMixin': {
            'docstring': 'A mixin class for adding versioning capabilities to SQLAlchemy models.\n\nThis mixin creates a separate table to store version history for the model.\nIt provides methods to save versions, retrieve version history, and revert\nto previous versions.\n\nAttributes:\n    versions (relationship): Relationship to the version history table.',
            'methods': ['versions', 'current_version', 'save_version', 'get_version', 'revert_to_version', 'get_version_history', 'compare_versions'],
            'attributes': []
        },
        'ReplicationMixin': {
            'docstring': 'A mixin class for adding data replication capabilities to SQLAlchemy models.\n\nThis mixin provides methods for replicating data across multiple databases,\nmanaging replication status, and handling conflict resolution.\n\nClass Attributes:\n    __replication_key__ (str): The attribute name to use as the replication key.\n    __replication_databases__ (list): List of database URLs for replication.',
            'methods': ['replication_id', 'last_replicated', '__declare_last__', '_after_insert', '_after_update', '_replicate', '_prepare_replication_data', 'sync_from_primary', 'resolve_conflicts'],
            'attributes': ['__replication_key__', '__replication_databases__']
        },
        'CommentableMixin': {
            'docstring': 'A comprehensive mixin class for adding advanced commenting capabilities to SQLAlchemy models.\n\nThis mixin provides methods for adding, retrieving, and managing comments\nassociated with model instances, including support for hierarchical comments,\nmoderation, and voting.\n\nClass Attributes:\n    __commentable__ (bool): Flag to enable/disable commenting for the model.\n    __comment_moderation__ (bool): Flag to enable/disable comment moderation.\n    __max_comment_depth__ (int): Maximum depth for nested comments.',
            'methods': ['comments', 'add_comment', 'get_comments', 'delete_comment', 'update_comment', 'approve_comment', 'vote_comment', 'get_most_commented', 'get_recently_commented'],
            'attributes': ['__commentable__', '__comment_moderation__', '__max_comment_depth__']
        },
        'InternationalizationMixin': {
            'docstring': 'A mixin class for adding internationalization support to SQLAlchemy models.\n\nThis mixin provides methods for storing and retrieving translated content\nfor specified fields, with support for fallback languages.\n\nClass Attributes:\n    __translatable__ (list): List of field names that should be translatable.\n    __fallback_locale__ (str): Fallback locale to use when a translation is not available.',
            'methods': ['translations', '__declare_last__', '_get_translation', '_set_translation', '_before_insert', '_before_update', 'set_translation', 'get_translation', 'export_translations', 'import_translations', 'get_missing_translations'],
            'attributes': ['__translatable__', '__fallback_locale__']
        },
        'SlugMixin': {
            'docstring': "A mixin class for adding slug functionality to SQLAlchemy models.\n\nThis mixin automatically generates a URL-friendly slug based on a specified field.\nIt ensures slug uniqueness within the model and provides methods for slug-based lookups.\n\nAttributes:\n    __slug_source__ (str): The name of the field to generate the slug from.\n    __slug_max_length__ (int): Maximum length of the generated slug (default: 100).\n    __slug_separator__ (str): The separator to use in the slug (default: '-').",
            'methods': ['slug', '__declare_last__', 'create_slug', '_slugify', '_slug_exists', 'validate_slug_source', 'get_by_slug', '__repr__'],
            'attributes': ['__slug_source__', '__slug_max_length__', '__slug_separator__']
        },
        'ApprovalWorkflowMixin': {
            'docstring': 'A mixin class for adding complex approval workflow capabilities to SQLAlchemy models.\n\nThis mixin provides methods for defining and managing multi-step approval processes,\nincluding parallel approvals and conditional steps.\n\nClass Attributes:\n    __approval_workflow__ (dict): Definition of the approval workflow steps and conditions.\n    __approval_roles__ (dict): Mapping of approval steps to required roles.',
            'methods': ['approval_status', 'current_step', 'approval_history', '__declare_last__', 'initiate_approval_process', 'approve_step', 'reject_step', '_can_approve', '_record_approval', '_record_rejection', '_get_next_step', '_evaluate_condition', 'get_approval_status', 'get_pending_approvals'],
            'attributes': []
        },
        'MultiTenancyMixin': {
            'docstring': "A mixin class for adding multi-tenancy support to SQLAlchemy models.\n\nThis mixin automatically scopes queries to the current tenant and provides\nutilities for working with multi-tenant data.\n\nClass Attributes:\n    __tenant_field__ (str): The name of the tenant field (default: 'tenant_id').\n    __shared_data__ (bool): Whether this model can have data shared across tenants (default: False).",
            'methods': ['tenant_id', 'tenant', '__declare_last__', '_before_insert', '_before_update', 'get_current_tenant_id', 'set_current_tenant', 'get_tenant_query', 'create_scoped_session', 'copy_to_tenant', 'get_shared_data'],
            'attributes': ['__tenant_field__', '__shared_data__']
        },
        'ArchiveMixin': {
            'docstring': 'A mixin class for adding archiving capabilities to SQLAlchemy models.\n\nThis mixin provides methods for archiving and unarchiving records, as well as\nquerying archived and active records.\n\nClass Attributes:\n    __archive_cascade__ (list): List of relationship attribute names to cascade archive operations.',
            'methods': ['is_archived', 'archived_at', '__declare_last__', 'archive', 'unarchive', 'archive_old_records', 'get_archive_stats', 'get_archived', 'get_active'],
            'attributes': ['__archive_cascade__']
        },
        'BaseModelMixin': {
            'docstring': 'A mixin class that provides functionality for managing view steps in SQLAlchemy models.\n\nThis mixin automatically creates a related table for storing view step information,\nand provides methods for managing and querying these view steps.\nA mixin class that provides extended functionality for SQLAlchemy models,\nincluding data export and import capabilities.\n\nMixin for models, adds 4 columns to stamp,\ntime and user on creation and modification\nwill create the following columns:\n\n:created on:\n:changed on:\n:created by:\n:changed by:\n\n:is_deleted:\n:deleted_at:\n:version:',
            'methods': ['created_by_fk', 'changed_by_fk', 'created_by', 'changed_by', 'get_user_id', 'get_current_user', '_user_representation', 'creator', 'modifier', 'changed_on_formatted', 'modified_relative', 'soft_delete', 'restore', 'get_active', 'update_completion_status', 'prompt_incomplete_forms', '__init_subclass__', 'create_view_step_table', 'set_columns_per_step', 'get_columns_per_step', 'define_view_step', 'get_view_step', 'get_all_view_steps', 'get_view_step_count', 'column_in_step', 'get_column_step', 'get_steps_for_columns', 'auto_assign_columns_to_steps', 'model_columns', 'mixin_columns', 'mixin_methods', 'column_details', 'column_count', 'shape_to_dict', 'estimate_row_size', 'get_python_type_sizes', 'shape_to_json', 'shape_to_csv', 'shape_to_text', 'to_dataframe', 'export_to_csv', 'export_to_excel', 'export_to_json', 'import_from_csv', 'import_from_excel', 'import_from_json', '_import_from_dataframe', 'bulk_insert_from_csv', 'bulk_insert_from_excel', 'bulk_insert_from_json', '_bulk_insert_from_dataframe', 'write_step_templates', 'generate_field_macro', 'generate_field_sets'],
            'attributes': []
        },
        'FullTextSearchMixin': {
            'docstring': "A mixin class for adding full-text search capabilities to SQLAlchemy models.\n\nThis mixin provides methods for creating and querying a full-text search\nvector, as well as utilities for ranking and highlighting search results.\n\nClass Attributes:\n    __fulltext_columns__ (dict): A dictionary mapping field names to their search weights.\n    __tsvector_column__ (str): The name of the column to store the search vector.\n    __search_config__ (str): The text search configuration to use (default: 'english').",
            'methods': ['search_vector', '__declare_last__', 'search', 'highlight_term', 'search_ranking', 'remove_html_tags', 'reindex_all'],
            'attributes': ['__fulltext_columns__', '__tsvector_column__', '__search_config__']
        },
        'SearchableMixin': {
            'docstring': "A mixin class for adding advanced full-text search capabilities to SQLAlchemy models.\n\nThis mixin provides methods for creating and updating search vectors, performing\nfull-text searches with ranking and highlighting, and managing search configurations.\n\nClass Attributes:\n    __searchable__ (dict): A dictionary specifying searchable fields and their weights.\n        Example: {'title': 'A', 'content': 'B', 'tags': 'C'}\n    __search_language__ (str): The language for text search configuration (default: 'english').",
            'methods': ['search_vector', '__declare_last__', '_before_insert', '_before_update', '_update_search_vector', 'search', 'highlight_term', 'search_ranking', 'update_search_vector', 'remove_html_tags', 'get_searchable_fields', 'set_search_language'],
            'attributes': ['__searchable__', '__search_language__']
        },
        'RateLimitMixin': {
            'docstring': "A mixin class for adding rate limiting capabilities to SQLAlchemy models.\n\nThis mixin provides methods for defining rate limits, checking if operations\nare allowed based on these limits, and handling rate limit violations.\n\nClass Attributes:\n    __rate_limits__ (dict): Defines the rate limits for different operations.\n        Format: {\n            'operation_name': {\n                'limit': int,  # number of allowed requests\n                'per': int,    # time window in seconds\n                'by': str      # 'ip', 'user', or 'api_key'\n            }\n        }",
            'methods': ['__declare_last__', 'get_redis_client', 'check_rate_limit', '_handle_rate_limit_exceeded', 'get_rate_limit_status'],
            'attributes': ['__rate_limits__']
        },
        'StateMachineMixin': {
            'docstring': 'A mixin that adds state machine functionality to SQLAlchemy models.\n\nThis mixin provides comprehensive state machine capabilities, including:\n- State and transition management\n- Workflow definition and execution\n- Event handling and processing\n- Notification system integration\n- History tracking and audit trail\n- Visualization and reporting\n\nAttributes:\n    state (Column): The current state of the instance.\n    workflow (Workflow): The workflow definition for this model.\n\nMethods:\n    trigger_event: Triggers a state transition event.\n    can_transition: Checks if a transition is possible.\n    get_available_transitions: Gets all available transitions from the current state.\n    visualize: Generates a visual representation of the state machine.\n    export_definition: Exports the state machine definition in various formats.',
            'methods': ['state', '_validate_workflow', '_setup_event_listeners', 'trigger_event', '_get_transition', 'can_transition', '_execute_transition', '_send_notifications', 'get_available_transitions', 'visualize', 'export_definition', 'get_state_counts', 'schedule_transition', 'generate_mermaid_diagram', 'update_mermaid_diagram', 'get_mermaid_diagram', 'export_mermaid_diagram', '__declare_last__'],
            'attributes': ['mermaid_diagram']
        },
        'SoftDeleteMixin': {
            'docstring': "A mixin class for adding soft delete functionality to SQLAlchemy models.\n\nThis mixin adds an 'is_deleted' column to the model and overrides the default\nquery class to filter out soft-deleted records. It also provides methods for\nsoft deleting and restoring records.\n\nAttributes:\n    is_deleted (Column): Boolean column indicating if the record is soft-deleted.\n    deleted_at (Column): DateTime column indicating when the record was soft-deleted.",
            'methods': ['is_deleted', 'deleted_at', '__declare_last__', 'soft_delete', 'restore', 'get_by_id', 'get_active', 'get_deleted', '__repr__'],
            'attributes': ['__abstract__']
        },
        'GeoLocationMixin': {
            'docstring': 'A mixin class for adding geolocation capabilities to SQLAlchemy models.\n\nThis mixin provides methods for storing and querying geographic coordinates,\ncalculating distances, and performing geospatial operations.\n\nAttributes:\n    latitude (Column): Latitude coordinate.\n    longitude (Column): Longitude coordinate.\n    location (Column): Geometry point for efficient spatial indexing.',
            'methods': ['latitude', 'longitude', 'location', '__declare_last__', 'set_coordinates', 'get_by_coordinates', 'distance_to', 'geocode_address', 'reverse_geocode', 'to_geojson', 'from_geojson', 'haversine_distance', 'get_bounding_box'],
            'attributes': []
        },
        'ProjectMixin': {
            'docstring': 'A mixin class that provides comprehensive project management functionality for SQLAlchemy models.\n\nThis mixin dynamically creates several related tables prefixed with \'nx_pj_\' to manage various aspects of a project,\nincluding project details, steps, deliverables, equipment, and team assignments. It integrates with Flask-AppBuilder\'s\nUser model for assigning responsibilities and tracking project team members.\n\nKey Features:\n1. Dynamic table creation for projects, steps, deliverables, equipment, and assignments.\n2. Integration with Flask-AppBuilder\'s User model for team management.\n3. Comprehensive project timeline tracking with early start and late end capabilities.\n4. Equipment management and allocation to projects.\n5. Deliverable tracking with due dates and status.\n6. Mermaid.js Gantt chart generation for visual project representation.\n\nMain Tables Created:\n- nx_pj_{tablename}_projects: Stores main project information.\n- nx_pj_{tablename}_steps: Manages individual project steps or phases.\n- nx_pj_{tablename}_deliverables: Tracks project deliverables.\n- nx_pj_{tablename}_equipment: Manages equipment inventory.\n- nx_pj_{tablename}_assignments: Links users to projects with roles and durations.\n\nUsage:\nTo use this mixin, create a model class that inherits from both ProjectMixin and your SQLAlchemy Base:\n\n```python\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom project_mixin import ProjectMixin\n\nBase = declarative_base()\n\nclass ProjectItem(ProjectMixin, Base):\n    __tablename__ = \'project_items\'\n    # Add any additional columns or methods specific to ProjectItem\n```\n\nAttributes:\nproject_id (Column): Foreign key linking to the main project table.\nproject (relationship): Relationship to the main Project model.\n\nClass Methods:\ncreate_project_tables(): Dynamically creates all necessary project-related tables.\nget_project_items(project_id): Retrieves all items associated with a specific project.\nget_active_projects(): Returns all active projects.\nassign_user_to_project(project_id, user_id, role, start_date, end_date): Assigns a user to a project.\nadd_equipment_to_project(project_id, equipment_id, quantity_required): Adds equipment to a project.\nget_project_timeline(project_id): Retrieves the timeline for a specific project.\nupdate_project_status(project_id, new_status): Updates the status of a project.\nget_project_resources(project_id): Retrieves all resources (team and equipment) assigned to a project.\nrender_mermaid(project_id): Generates a Mermaid.js Gantt chart code for the entire project.\n\nInstance Methods:\nto_dict(): Converts the project item to a dictionary representation.\n\nNote:\nThis mixin is designed to be flexible and can be customized further based on specific project management needs.\nIt provides a solid foundation for building a robust project management system within a Flask-AppBuilder application.\n\nExample:\n```python\n# Create a new project\nnew_project = ProjectItem.Project(name="New Project", description="A sample project")\ndb.session.add(new_project)\ndb.session.commit()\n\n# Assign a user to the project\nassignment = ProjectItem.assign_user_to_project(new_project.id, user_id=1, role="Project Manager")\ndb.session.add(assignment)\ndb.session.commit()\n\n# Generate a Gantt chart for the project\ngantt_chart = ProjectItem.render_mermaid(new_project.id)\n```\n\nSee individual method docstrings for more detailed information on usage and parameters.\n\nTo render gantt_chart in a Flask template:\n<div class="mermaid">\n    {{ mermaid_code | safe }}\n</div>\n\n    <script src="https://cdn.jsdelivr.net/npm/mermaid/dist/mermaid.min.js"></script>\n    <script>mermaid.initialize({startOnLoad:true});</script>',
            'methods': ['__init_subclass__', 'render_mermaid', 'create_project_tables', 'project_id', 'project', 'get_project_items', 'get_active_projects', 'assign_user_to_project', 'add_equipment_to_project', 'get_project_timeline', 'update_project_status', 'get_project_resources', 'to_dict'],
            'attributes': []
        },
    }
