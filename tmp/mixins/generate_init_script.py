"""
generate_mixins_init.py

This script introspects all Python files in the 'mixins' directory and generates
a fresh __init__.py file. It automatically imports all mixin classes and provides
a comprehensive overview of available mixins.

Author: Nyimbi Odero
Date: 25/08/2024
Version: 1.0
"""

import os
import ast
import importlib
import inspect
from typing import List, Dict, Any

def analyze_file(filepath: str) -> List[Dict[str, Any]]:
    """
    Analyze a Python file and extract information about mixin classes.

    Args:
        filepath (str): Path to the Python file to analyze.

    Returns:
        List[Dict[str, Any]]: A list of dictionaries containing information about each mixin class.
    """
    with open(filepath, 'r') as file:
        tree = ast.parse(file.read())

    mixins = []
    for node in ast.walk(tree):
        if isinstance(node, ast.ClassDef) and "Mixin" in node.name:
            mixin_info = {
                'name': node.name,
                'docstring': ast.get_docstring(node),
                'methods': [m.name for m in node.body if isinstance(m, ast.FunctionDef)],
                'attributes': [a.targets[0].id for a in node.body if isinstance(a, ast.Assign)]
            }
            mixins.append(mixin_info)

    return mixins

def generate_init_content(mixins: List[Dict[str, Any]]) -> str:
    """
    Generate the content for the __init__.py file.

    Args:
        mixins (List[Dict[str, Any]]): List of mixin information dictionaries.

    Returns:
        str: The content for the __init__.py file.
    """
    content = [
        '"""',
        'mixins/__init__.py',
        '',
        'This module provides access to all mixin classes defined in the mixins directory.',
        'It is automatically generated by the generate_mixins_init.py script.',
        '',
        'Available Mixins:',
    ]

    imports = []
    all_list = []

    for mixin in mixins:
        content.append(f"- {mixin['name']}: {mixin['docstring'].split('.')[0] if mixin['docstring'] else 'No description available.'}")
        imports.append(f"from .{mixin['name'].lower()[:-5]} import {mixin['name']}")
        all_list.append(mixin['name'])

    content.extend([
        '"""',
        '',
        '# Mixin imports'
    ])
    content.extend(imports)
    content.extend([
        '',
        '# Define __all__ for explicit exports',
        f"__all__ = {all_list}",
        '',
        'def get_mixin_info():',
        '    """',
        '    Get information about all available mixins.',
        '',
        '    Returns:',
        '        dict: A dictionary containing information about each mixin.',
        '    """',
        '    return {'
    ])

    for mixin in mixins:
        content.append(f"        '{mixin['name']}': {{")
        content.append(f"            'docstring': {repr(mixin['docstring'])},")
        content.append(f"            'methods': {mixin['methods']},")
        content.append(f"            'attributes': {mixin['attributes']}")
        content.append("        },")

    content.append('    }')

    return '\n'.join(content)

def main():
    """
    Main function to generate the __init__.py file for the mixins package.
    """
    mixins_dir = 'mixins'
    init_file = os.path.join(mixins_dir, '__init__.py')

    if not os.path.exists(mixins_dir):
        print(f"Error: Directory '{mixins_dir}' does not exist.")
        return

    all_mixins = []

    for filename in os.listdir(mixins_dir):
        if filename.endswith('.py') and filename != '__init__.py':
            filepath = os.path.join(mixins_dir, filename)
            try:
                file_mixins = analyze_file(filepath)
                all_mixins.extend(file_mixins)
            except Exception as e:
                print(f"Error analyzing file {filename}: {str(e)}")

    init_content = generate_init_content(all_mixins)

    try:
        with open(init_file, 'w') as f:
            f.write(init_content)
        print(f"Successfully generated {init_file}")
    except Exception as e:
        print(f"Error writing to {init_file}: {str(e)}")

    # Verify the generated file
    try:
        spec = importlib.util.spec_from_file_location("mixins", init_file)
        module = importlib.util.module_from_spec(spec)
        spec.loader.exec_module(module)
        print("Verification successful: The generated __init__.py file can be imported without errors.")
    except Exception as e:
        print(f"Verification failed: Error importing the generated __init__.py file: {str(e)}")

if __name__ == '__main__':
    main()
