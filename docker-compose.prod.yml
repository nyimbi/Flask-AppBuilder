version: '3.8'

services:
  # PostgreSQL with Apache AGE extension
  postgres-age:
    image: apache/age:latest
    container_name: fab-ext-postgres-age
    environment:
      POSTGRES_DB: graph_analytics_db
      POSTGRES_USER: graph_admin
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - graph-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U graph_admin -d graph_analytics_db"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis for caching and session storage
  redis:
    image: redis:7-alpine
    container_name: fab-ext-redis
    command: redis-server --requirepass ${REDIS_PASSWORD} --maxmemory 512mb --maxmemory-policy allkeys-lru
    ports:
      - "6379:6379"
    networks:
      - graph-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Flask-AppBuilder application
  webapp:
    build:
      context: .
      dockerfile: Dockerfile.prod
    container_name: fab-ext-webapp
    environment:
      # Database configuration
      DATABASE_URI: postgresql://graph_admin:${POSTGRES_PASSWORD}@postgres-age:5432/graph_analytics_db
      
      # Redis configuration
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379/0
      
      # Security configuration
      SECRET_KEY: ${SECRET_KEY}
      SECURITY_PASSWORD_SALT: ${SECURITY_PASSWORD_SALT}
      
      # Application configuration
      FLASK_ENV: production
      FLASK_DEBUG: "False"
      FAB_SECURITY_MANAGER_CLASS: flask_appbuilder.security.manager.SecurityManager
      
      # Logging configuration
      LOG_LEVEL: INFO
      LOG_FILE: /app/logs/application.log
      
      # Performance configuration
      WORKERS: 4
      TIMEOUT: 300
      MAX_REQUESTS: 1000
      MAX_REQUESTS_JITTER: 100
      
      # Feature flags
      ENABLE_AI_ASSISTANT: ${ENABLE_AI_ASSISTANT:-true}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      ENABLE_FEDERATED_ANALYTICS: ${ENABLE_FEDERATED_ANALYTICS:-true}
      ENABLE_MULTIMODAL_PROCESSING: ${ENABLE_MULTIMODAL_PROCESSING:-true}
      
      # Enterprise features
      ENABLE_SSO: ${ENABLE_SSO:-false}
      LDAP_SERVER: ${LDAP_SERVER}
      LDAP_BIND_DN: ${LDAP_BIND_DN}
      LDAP_BIND_PASSWORD: ${LDAP_BIND_PASSWORD}
      
      # Monitoring
      ENABLE_METRICS: "true"
      METRICS_PORT: 9090
      
    volumes:
      - app_logs:/app/logs
      - app_uploads:/app/uploads
      - app_cache:/app/cache
    ports:
      - "8080:8080"
      - "9090:9090"  # Metrics port
    depends_on:
      postgres-age:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - graph-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: fab-ext-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - static_files:/var/www/static:ro
    depends_on:
      - webapp
    networks:
      - graph-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus for monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: fab-ext-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=15d'
      - '--web.enable-lifecycle'
    ports:
      - "9091:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - graph-network
    restart: unless-stopped

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: fab-ext-grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD}
      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - graph-network
    restart: unless-stopped

  # Log aggregation
  fluentd:
    build: ./logging/fluentd
    container_name: fab-ext-fluentd
    volumes:
      - app_logs:/fluentd/log/app:ro
      - ./logging/fluentd/conf:/fluentd/etc:ro
    ports:
      - "24224:24224"
    networks:
      - graph-network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  app_logs:
    driver: local
  app_uploads:
    driver: local
  app_cache:
    driver: local
  static_files:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  graph-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16